# -*- coding: utf-8 -*-
"""ALIGNN_Structure_Relaxation_Phonons_Interface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/knc6/jarvis-tools-notebooks/blob/master/jarvis-tools-notebooks/ALIGNN_Structure_Relaxation_Phonons_Interface.ipynb

Examples how to use ALIGNN-FF (https://doi.org/10.1039/D2DD00096B) Pre-trained model.

An example of training ALIGNN-FF from scratch for 307K dataset is given [here](https://github.com/knc6/jarvis-tools-notebooks/blob/master/jarvis-tools-notebooks/Train_ALIGNNFF_JARVIS_DFT_DB_307k.ipynb)
"""

# !pip install -q condacolab
# import condacolab
# condacolab.install()

"""Installation with conda"""

# %%time

# !conda install dgl=2.1.0 pytorch torchvision torchaudio pytorch-cuda phonopy -c pytorch -c nvidia --quiet

# !pip uninstall alignn -y
# !pip install -q -U git+https://github.com/usnistgov/alignn.git@develop

# Commented out IPython magic to ensure Python compatibility.
# %%time
# import os
# # !pip install -q alignn
# # !pip uninstall dgl -y
# os.chdir('/content')
# # Clone ALIGNN repo to get example folder
# if not os.path.exists('alignn'):
#    !git clone https://github.com/atomgptlab/alignn.git
# os.chdir("alignn")
# 
# !git checkout develop
# !pip install -q --no-cache-dir dgl -f https://data.dgl.ai/wheels/torch-2.4/cu124/repo.html
# !pip install -e .
# # !uv pip install -q -e .
# os.chdir('/content')

"""Import necessary libraries"""

#!pip install -q "phonopy==2.10.0"
#Might have to restart session

from jarvis.io.vasp.inputs import Poscar
from alignn.ff.ff import (
    phonons,
    AlignnAtomwiseCalculator,
    default_path,
)
from jarvis.db.figshare import get_jid_data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from jarvis.core.atoms import Atoms, get_supercell_dims
from tqdm import tqdm
from ase.constraints import ExpCellFilter
from sklearn.metrics import mean_absolute_error
import time
from jarvis.core.atoms import ase_to_atoms
from ase.optimize.fire import FIRE
from ase.md.nvtberendsen import NVTBerendsen
from ase.md.velocitydistribution import MaxwellBoltzmannDistribution
from ase import units
from ase.md.nvtberendsen import NVTBerendsen
from ase.md.velocitydistribution import MaxwellBoltzmannDistribution

"""A few examples of metals, semiconductors and insulators"""

jids_check = [
    "JVASP-1002", # Si
    "JVASP-816", # Al
    "JVASP-867", # Cu
    "JVASP-1029", # Ti
    "JVASP-861", # Cr
    "JVASP-30", # GaN Pg3mmc
    "JVASP-8169", #GaN F-43m
    "JVASP-890", #Ge
    "JVASP-8158", #SiC F-43m
    "JVASP-8118", #SiC P6_3mmc
    "JVASP-107", #SiC P6_3mc
    "JVASP-39", #AlN P6_3mc
    "JVASP-7844", #AlN F-43m
    "JVASP-35106", #Al3GaN4 P-43m
    "JVASP-1174", #GaAs F-43m
    "JVASP-1372", #AlAs F-43m
    "JVASP-91", #C Fd-3m
    "JVASP-1186", #InAs F-43M
    "JVASP-1408", #AlSb F-43M
    "JVASP-105410", #SiGe F-43m
    "JVASP-1177", #GaSb F-43m
    "JVASP-79204", #BN P63mc
    "JVASP-1393", #GaP F-43m
    "JVASP-1312", #BP F-43m
    "JVASP-1327", #AlP F-43m
    "JVASP-1183", #InP F-43m
    "JVASP-1192", #CdSe F-43m
    "JVASP-8003", #CdS F-43m
    "JVASP-96", #ZnSe F-43m
    "JVASP-1198", #ZnTe F-43m
    "JVASP-1195", #ZnO P63mc
    "JVASP-9147", #HfO2 P21c
    "JVASP-41", #SiO2 P3_221
    "JVASP-34674", #SiO2 C222_1
    "JVASP-113", #ZrO2 P2_1c
    "JVASP-32", #Al2O3 R-3c
]

def general_relaxer(atoms="", calculator="", fmax=0.05, steps=150):
    ase_atoms = atoms.ase_converter()
    ase_atoms.calc = calculator
    ase_atoms = ExpCellFilter(ase_atoms)

    dyn = FIRE(ase_atoms)
    dyn.run(fmax=fmax, steps=steps)
    return ase_to_atoms(ase_atoms.atoms)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# %matplotlib inline
# # Note this is a different model than that published in originall
# # https://doi.org/10.1039/D2DD00096B
# import matplotlib.pyplot as plt
# #jids=['JVASP-1002']
# jids=jids_check
# model_path = default_path()
# 
# calc = AlignnAtomwiseCalculator(
#     path=model_path,
#     stress_wt=0.05,
# )
# aff_lat = []
# wiki_lat = []
# formulas = []
# for jid in tqdm(jids, total=len(jids)):
#     s = Atoms.from_dict(get_jid_data(jid=jid, dataset="dft_3d")["atoms"])
# 
#     print(s)
#     t1 = time.time()
#     formula=s.composition.reduced_formula
#     opt = general_relaxer(atoms=s, calculator=calc)
#     t2 = time.time()
#     aff_lat.append(opt.lattice_mat[0][0])
#     formulas.append(s.composition.reduced_formula)
#     print(t2 - t1, opt)  # , w cs, mean_absolute_error(iki_lat, aff_lat))
#     strains = np.arange(-0.1, 0.1, 0.01)
#     vols = []
#     ens = []
#     for i in (strains):
#         sup = opt.get_conventional_atoms.make_supercell_matrix([2, 2, 2])
#         atms = sup.strain_atoms(i)
#         # atms=opt.strain_atoms(i)
#         ase_atoms = atms.ase_converter()
#         ase_atoms.calc = calc
#         en = ase_atoms.get_potential_energy()
#         ens.append(en)
#         vols.append(atms.volume)
#         # vols.append(atms.volume**(1/3))
#     plt.plot(vols, ens, "-o")
#     fname = "ev_" + jid +"_"+formula+ ".png"
#     plt.savefig(fname)
#     plt.close()
#     atoms = opt.get_primitive_atoms
#     name = jid +"_"+formula
#     phonopy_bands_figname = "ph_" + name+ ".png"
# 
#     phonopy_bands_figname = "ph_" + jid +"_"+formula+ ".png"
#     ph = phonons(
#         model_path=model_path,
#         atoms=atoms,
#         phonopy_bands_figname=phonopy_bands_figname,
#         force_multiplier=1.9,
#     )
#     plt.figure()
#     plt.axis('off')
#     plt.title(name)
#     plt.imshow(plt.imread(phonopy_bands_figname))
#     plt.show()
#     plt.close()
# 
#     plt.figure()
#     plt.axis('off')
#     plt.title(name)
#     plt.imshow(plt.imread(fname))
#     plt.show()
#     plt.close()

#!pip install -q git+https://github.com/usnistgov/intermat.git@develop

# Commented out IPython magic to ensure Python compatibility.
from jarvis.db.jsonutils import loadjson
from jarvis.core.atoms import Atoms
from jarvis.io.vasp.inputs import Poscar
from intermat.generate import InterfaceCombi
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
poscar_1="""SePb
1.0
3.7915451495815202 2.0179111e-09 2.189049588909996
1.2638480536514642 3.5747026449991512 2.189049588909996
0.0 0.0 4.378099177819992
Pb Se
1 1
Cartesian
0.0 0.0 0.0
2.5277 1.78735 4.3781
"""
poscar_2="""Pb
1.0
3.0698776614655223 1.6064780811e-06 1.7723974364942805
1.0232937672951337 2.894307780811061 1.7723973872638596
2.09483931e-06 1.4211877594e-06 3.544790250482119
Pb
1
Cartesian
-7.37161948995e-10 1.114499506167e-09 7.940777072720001e-10
"""
atoms1 = Poscar.from_string(poscar_1).atoms
atoms2 = Poscar.from_string(poscar_2).atoms
seperations=np.arange(0.5,4.5,0.1)
# disp_intvl = 0.1 for xy-plane scan
x = InterfaceCombi(
    film_indices=[[1, 0, 0]],
    subs_indices=[[1, 0, 0]],
    vacuum_interface=2,
    film_mats=[atoms1],
    subs_mats=[atoms2],
    disp_intvl=0.0,
    seperations=seperations,
    from_conventional_structure_film=True,
    from_conventional_structure_subs=True,
    max_area=300,
    ltol=0.08,
    dataset=[None],

)
extra_params={}
extra_params["alignn_params"]={}
extra_params["alignn_params"]["model_path"]=default_path()

structs = x.generate()
wads = x.calculate_wad(method='alignn_ff',extra_params=extra_params)
plt.plot(seperations,wads)
plt.show()
print('Min val',min(wads),'at',seperations[np.argmin(wads)])

# Commented out IPython magic to ensure Python compatibility.
from jarvis.db.jsonutils import loadjson
from jarvis.core.atoms import Atoms
from jarvis.io.vasp.inputs import Poscar
from intermat.generate import InterfaceCombi
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
poscar_1="""SePb
1.0
3.7915451495815202 2.0179111e-09 2.189049588909996
1.2638480536514642 3.5747026449991512 2.189049588909996
0.0 0.0 4.378099177819992
Pb Se
1 1
Cartesian
0.0 0.0 0.0
2.5277 1.78735 4.3781
"""
poscar_2="""Pb
1.0
3.0698776614655223 1.6064780811e-06 1.7723974364942805
1.0232937672951337 2.894307780811061 1.7723973872638596
2.09483931e-06 1.4211877594e-06 3.544790250482119
Pb
1
Cartesian
-7.37161948995e-10 1.114499506167e-09 7.940777072720001e-10
"""
atoms1 = Poscar.from_string(poscar_1).atoms
atoms2 = Poscar.from_string(poscar_2).atoms

# disp_intvl = 0.1 for xy-plane scan
x = InterfaceCombi(
    film_indices=[[1, 0, 0]],
    subs_indices=[[1, 0, 0]],
    vacuum_interface=2,
    film_mats=[atoms1],
    subs_mats=[atoms2],
    disp_intvl=0.1,
    seperations=[seperations[np.argmin(wads)]],
    from_conventional_structure_film=True,
    from_conventional_structure_subs=True,
    max_area=300,
    ltol=0.08,
    dataset=[None],

)
extra_params={}
extra_params["alignn_params"]={}
extra_params["alignn_params"]["model_path"]=default_path()

structs = x.generate()
wads = x.calculate_wad(method='alignn_ff',extra_params=extra_params)

from matplotlib import cm

X = x.X
Y = x.Y

wads = np.array(wads).reshape(len(X), len(Y))
plt.contourf(wads, cmap=cm.coolwarm)

