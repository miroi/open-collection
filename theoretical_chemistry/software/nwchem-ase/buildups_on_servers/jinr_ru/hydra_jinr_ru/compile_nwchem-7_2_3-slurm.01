#!/bin/bash

#SBATCH -J NWbuild

##  partition (queue)
#SBATCH -p cascade
##SBATCH -p knl
##SBATCH -p flnr-ice

## max. execution time
##SBATCH -t 7-00:00:00
#SBATCH -t 4-00:00:00

##SBATCH --exclusive

##SBATCH --mem=32GB
#SBATCH --mem=64GB
##SBATCH --mem=164GB
##SBATCH --mem=16GB

# do not restart in the case of nodefail!
#SBATCH --no-requeue
#SBATCH --no-kill

#SBATCH -N 1 -n 8
#SBATCH  --sockets-per-node=1

## memory NO !!!
##SBATCH --mem-per-cpu=28G

## stdout/stderr output file
##SBATCH -o log_slurm_job.%j.%N.std_out_err
#SBATCH -o log_slurm_job.%j.%N.std_out

## mail
#SBATCH --mail-user=siuraksh@jinr.ru
#SBATCH --mail-type=ALL


echo -e "\n Job user is $SLURM_JOB_USER and his job $SLURM_JOB_NAME has assigned ID $SLURM_JOBID"
echo This job was submitted from the computer $SLURM_SUBMIT_HOST
echo and from the home directory:
echo $SLURM_SUBMIT_DIR
echo
echo It is running on the cluster compute node:
echo $SLURM_CLUSTER_NAME
echo and is employing $SLURM_JOB_NUM_NODES node/nodes:
echo $SLURM_JOB_NODELIST
echo
echo -e "Job partition is $SLURM_JOB_PARTITION \n"
echo The job requests $SLURM_CPUS_ON_NODE CPU per task.

#echo "modules at disposal:"
#module avail
#echo

#
module purge
#module load openmpi/v2.1.2-2
module add GVR/v1.0-1
#module add intel/v2021.1
module add ELPA/v2020.05.001_intel2018_python365
#module add Python/v3.10.2
#module add gcc/v10.2.0
module unload openmpi/v1.8.8-1
echo -e "\n\n loaded modules for NWChem compulation :"
module list

#           NWChem on hydra.jinr.ru
# /lustre/home/user/m/milias/work/software/nwchem/nwchem-7.2.3-release
# 
  echo -e "\n*** hydra.jinr.ru setting for NWChem compilation:   ***"

  #export NWCHEM_TOP=/home/milias/Work/qch/software/nwchem_suite/nwchem-7.0.2
  #export NWCHEM_TOP=/lustre/home/user/m/milias/work/software/nwchem/nwchem-7.2.3-release
  export NWCHEM_TOP=/lustre/home/user/m/milias/work/software/nwchem/nwchem-7.2.3
  echo -e "\n NWCHEM_TOP=$NWCHEM_TOP"

  export NWCHEM_TARGET="LINUX64"
  echo -e "\n NWCHEM_TARGET=$NWCHEM_TARGET"

  export PYTHONVERSION=3.6
  echo -e "\n Python version for NWChem : \c"; which python; python -V

  export USE_MPI=y
  echo -e "\n USE_MPI=$USE_MPI"

  # server's Intel compiler
  export FC=ifort
  echo -e "\nFC=$FC"
  echo -e "ifort ?"; which ifort; ifort --version
  export CC=icc # try
  echo -e "CC=$CC"
  echo -e "icc ?"; which icc; icc --version

  #export MPI_F90=mpif90
  export MPI_F90=mpiifort
  echo -e "\nMPI_F90=$MPI_F90"
  echo -e "mpiifort ?"; which mpiifort; mpiifort -V
  echo -e "mpirun ?";  which mpirun; mpirun --version

 # export MPI_CC=mpicc
 # export MPI_CXX=mpicxx
 ### based on "mpif90 -show"
 # export LIBMPI="-lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi"
 # export MPI_LIB="/home/milias/bin/openmpi-4.0.1_suites/openmpi-4.0.1_Intel14_GNU6.3g++/lib -Wl,-rpath  /home/milias/bin/openmpi-4.0.1_suites/openmpi-4.0.1_Intel14_GNU6.3g++/lib -Wl,--enable-new-dtags -L/home/milias/bin/openmpi-4.0.1_suites/openmpi-4.0.1_Intel14_GNU6.3g++/lib"
 # export MPI_INCLUDE="/home/milias/bin/openmpi-4.0.1_suites/openmpi-4.0.1_Intel14_GNU6.3g++/include /home/milias/bin/openmpi-4.0.1_suites/openmpi-4.0.1_Intel14_GNU6.3g++/lib -Wl,-rpath -Wl"

  echo -e "\n ===  We have the MKL library, MKLROOT=${MKLROOT}"

  export BLAS_SIZE=8
  echo -e "\n BLAS_SIZE=$BLAS_SIZE"

  #export BLASOPT="-L/usr/lib -lblas"
  #export BLASOPT="${MKLROOT}/lib/mic/libmkl_blas95_ilp64.a -L${MKLROOT}/lib/mic -lmkl_scalapack_ilp64 -lmkl_cdft_core -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -lmkl_blacs_intelmpi_ilp64 -liomp5 -lpthread -lm -ldl"
  #export BLASOPT="-mkl -i8"
  #export BLASOPT="-L$MKLROOT/lib/intel64 -lmkl_intel_ilp64 -lmkl_core -lmkl_sequential -lmkl_core -liomp5 -lpthread -ldmapp -lm"
  export BLASOPT="-mkl -openmp -lpthread -lm"
  echo -e "BLASOPT=$BLASOPT"

  export LAPACK_SIZE=8
  echo -e "LAPACK_SIZE=$LAPACK_SIZE"

  #export LAPACK_LIB="-L/usr/lib -llapack"
  #export LAPACK_LIB="${MKLROOT}/lib/mic/libmkl_lapack95_ilp64.a -L${MKLROOT}/lib/mic -lmkl_scalapack_ilp64 -lmkl_cdft_core -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -lmkl_blacs_intelmpi_ilp64 -liomp5 -lpthread -lm -ldl"
  export LAPACK_LIB=$BLASOPT
  echo -e "\n LAPACK_LIB=$LAPACK_LIB"

  export USE_SCALAPACK=y
  export SCALAPACK_SIZE=8
  echo -e "\n SCALAPACK_SIZE=$LAPACK_SIZE"
  #export SCALAPACK="-L$MKLROOT/lib/intel64 -lmkl_scalapack_ilp64 -lmkl_intel_ilp64 -lmkl_core -lmkl_sequential \  
  export SCALAPACK="-mkl -openmp -lmkl_scalapack_ilp64 -lmkl_blacs_intelmpi_ilp64 -lpthread -lm"
  #export SCALAPACK="-mkl -openmp -lmkl_scalapack_ilp64 -lmkl_blacs_intelmpi_ilp64"
  echo -e "using SCALAPACK=$SCALAPACK"

# https://nwchemgit.github.io/Compiling-NWChem.html#how-to-intel-xeon-phi
  export USE_KNL=1 
  export USE_OPENMP=1  
  export USE_F90_ALLOCATABLE=T  
  export USE_FASTMEM=T

  export USE_64TO32="n" # see http://www.nwchem-sw.org/index.php/Special:AWCforum/sp/id7260
  echo -e "USE_64TO32=$USE_64TO32"

  export LARGE_FILES=1
  echo -e "LARGE_FILES=$LARGE_FILES"

  #export PYTHONVERSION=2.6
  export USE_NOFSCHECK=TRUE
  echo -e "USE_NOFSCHECK=$USE_NOFSCHECK"

  export USE_NOIO=TRUE
  echo -e "USE_NOIO=$USE_NOIO"

  export NWCHEM_LONG_PATHS=1
  echo -e "NWCHEM_LONG_PATHS=$NWCHEM_LONG_PATHS"

  export NWCHEM_MODULES="all python" # remove python
  echo -e "NWCHEM_MODULES=$NWCHEM_MODULES"

  export NWCHEM_EXECUTABLE=$NWCHEM_TOP/bin/LINUX64/nwchem
  echo -e "NWCHEM_EXECUTABLE=$NWCHEM_EXECUTABLE"

  export NWCHEM_BASIS_LIBRARY=$NWCHEM_TOP/src/basis/libraries.bse
  echo -e "NWCHEM_BASIS_LIBRARY=$NWCHEM_BASIS_LIBRARY"

  echo -e "\nNWChem environmental variables were defined for hydra.jinr.ru - GOING TO COMPILE:"

  cd $NWCHEM_TOP
  echo "\n I am in :\c";pwd
  #echo "Launching 'git clean -f -d -x' :"; git clean -f -d -x

  cd $NWCHEM_TOP/src
  echo -e "\n I am in :\c";pwd;ls -lt

  # https://nwchemgit.github.io/Compiling-NWChem.html#setting-the-default-memory-values
  echo -e "\n launching : FC=ifort ../contrib/getmem.nwchem"
  FC=ifort ../contrib/getmem.nwchem


  echo -e "\n  make nwchem_config: ";make nwchem_config 
  echo -e "\  launching make -j$SLURM_CPUS_ON_NODE :"; make -j$SLURM_CPUS_ON_NODE

  # build the version info
   echo -e "\n build the version info :"
   cd $NWCHEM_TOP/src/util
   make version
   make
   cd $NWCHEM_TOP/src
   make link


   echo -e "\n After the NWCHem compilation:"
   echo -e "\n   ls -l $NWCHEM_TOP/bin/LINUX64: "
   ls -l $NWCHEM_TOP/bin/LINUX64       
   echo -e "\n   ls -l $NWCHEM_TOP/lib/LINUX64:"
   ls -l $NWCHEM_TOP/lib/LINUX64   
  
  
  exit 0
