module m
  use, intrinsic :: iso_fortran_env
  integer, parameter :: fp_kind=real32
contains
  attributes(global) subroutine increment(a, offset)
    real(fp_kind) :: a(*)
    integer, value :: offset
    integer :: i
    i = blockDim%x*(blockIdx%x-1)+threadIdx%x + offset
    a(i) = a(i)+1
  end subroutine increment
end module m

program offset
  use cudafor
  use m
  
  implicit none
  
  integer, parameter :: nMB = 128  ! transfer size in MB
  integer, parameter :: n = nMB*1024*1024/fp_kind
  integer, parameter :: blockSize = 256
  real(fp_kind), device :: a_d(n+32)
  type(cudaEvent) :: startEvent, stopEvent
  type(cudaDeviceProp) :: prop
  integer :: i, istat
  real(4) :: time


  istat = cudaGetDeviceProperties(prop, 0)
  print "(/,'Device: ',a)", trim(prop%name)
  print "('Transfer size (MB): ',i0)", nMB

  if (kind(a_d) == real32) then
     print "('Single Precision',/)"
  else
     print "('Double Precision',/)"
  endif

  istat = cudaEventCreate(startEvent)
  istat = cudaEventCreate(stopEvent)
 
  print *, 'Offset, Bandwidth (GB/s):'
  do i = 0, 32
     a_d = 0.0
     istat = cudaEventRecord(startEvent,0)
     call increment<<<n/blockSize,blockSize>>>(a_d, i)
     istat = cudaEventRecord(stopEvent,0)
     istat = cudaEventSynchronize(stopEvent)
     
     istat = cudaEventElapsedTime(time, startEvent, &
          stopEvent)
     print *, i, 2*n*fp_kind/time*1.e-6
  enddo
 
  istat = cudaEventDestroy(startEvent)
  istat = cudaEventDestroy(stopEvent) 
end program offset
