#!/bin/bash

#PBS -S /bin/bash
#PBS -A UMB-ITMS-26110230082
#PBS -N DalCTest
### Declare myprogram non-rerunable
#PBS -r n

##PBS -l nodes=1:ppn=12:old
#PBS -l nodes=1:ppn=4

#PBS -l walltime=5:00:00

##PBS -l mem=47g
##PBS -l mem=32g
#PBS -l mem=12g  # 4x3gb=12gb

#PBS -j oe

#PBS -q batch
##PBS -q debug

#PBS -M Miroslav.Ilias@umb.sk

echo -e "\n Working host is: "; hostname -f

# Intel 2013 compilers
source /mnt/apps/intel/bin/compilervars.sh intel64
# Intel MKL 2013 math library
source /mnt/apps/intel/composer_xe_2013_sp1.1.106/mkl/bin/mklvars.sh intel64
echo -e "\n Intel Fortran/C/C++ commercial compilers 2013 with MKL library 2013 activated, PROD_DIR=$PROD_DIR, MKLROOT=$MKLROOT."

#source /mnt/apps/pgi/environment.sh
# libnumma for PGI
#export LD_LIBRARY_PATH=/home/milias/bin/lib64_libnuma:$LD_LIBRARY_PATH

echo "My PATH=$PATH"
echo "Running on host `hostname`"
echo "Time is `date`"
echo "Directory is `pwd`"
echo "This jobs runs on the following processors:"
echo `cat $PBS_NODEFILE`

UNIQUE_NODES="`cat $PBS_NODEFILE | sort | uniq`"
UNIQUE_NODES="`echo $UNIQUE_NODES | sed s/\ /,/g `"
echo "Unique nodes for parallel run:  $UNIQUE_NODES"

# Extract number of processors
NPROCS_PBS=`wc -l < $PBS_NODEFILE`
NPROCS=`cat /proc/cpuinfo | grep processor | wc -l`
echo "This node has $NPROCS CPUs."
echo "This node has $NPROCS_PBS CPUs allocated for PBS calculations."

#echo "PBS_SERVER=$PBS_SERVER"
echo "PBS_NODEFILE=$PBS_NODEFILE"
echo "PBS_O_QUEUE=$PBS_O_QUEUE"
echo "PBS_O_WORKDIR=$PBS_O_WORKDIR"
#

#export MKL_NUM_THREADS=$NPROCS
#echo "MKL_NUM_THREADS=$MKL_NUM_THREADS"
#export MKL_DOMAIN_NUM_THREADS="MKL_BLAS=$NPROCS"
export OMP_NUM_THREADS=1
export MKL_DYNAMIC="FALSE"
export OMP_DYNAMIC="FALSE"

# provide OpenMPI-Intel - local installation for DIRAC
#export PATH=/home/milias/bin/openmpi-2.1.1-intel14/bin:$PATH
#export LD_LIBRARY_PATH=/home/milias/bin/openmpi-2.1.1-intel14/lib:$LD_LIBRARY_PATH

DALTON=/home/milias/Work/qch/software/dalton_suite/dalton_master
BUILD=build_intelmklpar_openmpi
echo -e "Linked libraries,  ldd $DALTON/$BUILD/dalton.x:"
ldd $DALTON/$BUILD/dalton.x

echo -e "\nPython -V \c"; python -V
echo -e "mpf90 ? \c"; which mpif90; mpif90 --version
echo -e "mpirun ? \c"; which mpirun; mpirun --version

# set local scratch directory for your runs 
export DALTON_TMPDIR=/mnt/local/$USER/$PBS_JOBID
echo -e "\n Local scratch directory, DALTON_TMPDIR=$DALTON_TMPDIR \c"; df -h /mnt/local/$USER/

export DALTON_NUM_MPI_PROCS=$NPROCS_PBS 
echo -e "DALTON parallel run on DALTON_NUM_MPI_PROCS=$DALTON_NUM_MPI_PROCS CPUs"

cd $PBS_O_WORKDIR

  # set MKL envirovariables
  unset MKL_NUM_THREADS
  #export MKL_NUM_THREADS=$nmkl
  export MKL_NUM_THREADS=1
  echo -e "\nUpdated MKL_NUM_THREADS=$MKL_NUM_THREADS"
  echo -e "MKL_DYNAMIC=$MKL_DYNAMIC"
  echo -e "OMP_NUM_THREADS=$OMP_NUM_THREADS"
  echo -e "OMP_DYNAMIC=$OMP_DYNAMIC"
  
# send MKL enviro-variables to nodes
#PBS -v MKL_NUM_THREADS
#PBS -v MKL_DYNAMIC
#PBS -v OMP_NUM_THREADS
#PBS -v OMP_DYNAMIC
# Passing your whole environment
#PBS -V

 echo -e "\n Running $DALTON/$BUILD/ctest -L short"
 $DALTON/$BUILD/ctest -L short

exit 0
